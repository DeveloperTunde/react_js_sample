{"ast":null,"code":"var _jsxFileName = \"/Users/developertunde/iitatv/src/components/TvPlayerIndex.jsx\";\nimport React, { Component } from 'react';\nimport ReactPlayer from 'react-player/lazy';\nimport { BrowserRouter, Router, Switch, Route, Link } from \"react-router-dom\";\nimport '../assets/css/videos.css';\nimport '../assets/css/styles.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FaVolumeDown, FaVolumeMute, FaVolumeOff, FaVolumeUp } from 'react-icons/fa';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TvView extends Component {\n  constructor() {\n    super();\n\n    this.ref = player => {\n      this.player = player;\n    };\n\n    this.seekto = () => {\n      this.player.seekTo(this.state.videodata.startvideoat, 'seconds');\n    };\n\n    this.fetchStream = () => {\n      //http://192.168.137.1/videostreaming/allvideos\n      fetch('/videostreaming/streaming.php', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          accesstoken: 'iita-web-developer'\n        })\n      }).then(response => response.json()).then(responseJSON => {\n        this.setState({\n          isLoaded: true,\n          videodata: responseJSON['output'][0]['data'][0]\n        }); // console.log(responseJSON);\n\n        if (responseJSON['output'][0]['data'][0].streamtype == 'live') {\n          setTimeout(() => {\n            this.seekto();\n          }, 2000);\n        }\n      });\n    };\n\n    this.fetchChangeURL = () => {\n      //http://192.168.137.1/videostreaming/allvideos\n      fetch('/videostreaming/streaming.php', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          accesstoken: 'iita-web-developer'\n        })\n      }).then(response => response.json()).then(responseJSON => {\n        if (responseJSON['output'][0]['data'][0].videofile === this.state.videodata.videofile) {} else {\n          this.setState({\n            isLoaded: true,\n            videodata: responseJSON['output'][0]['data'][0]\n          });\n\n          if (responseJSON['output'][0]['data'][0].streamtype == 'live') {\n            this.seekto();\n          } //console.log(responseJSON);\n\n        } //console.log(responseJSON);\n\n      });\n    };\n\n    this.handlePlayAndPause = () => {\n      this.setState(prevState => ({\n        shouldPlay: !prevState.shouldPlay\n      }));\n    };\n\n    this.handleMute = () => {\n      this.setState({\n        isMuted: false\n      });\n    };\n\n    this.handleUnmute = () => {\n      this.setState({\n        isMuted: true\n      });\n    };\n\n    this.state = {\n      isLoaded: false,\n      videos: [],\n      mute: false,\n      shouldPlay: true,\n      currenttime: 0,\n      starttime: 0,\n      videodata: [],\n      videodata2: [],\n      currentValue: 0,\n      isMuted: true\n    };\n    this.getCurrentValue = this.getCurrentValue.bind(this);\n  }\n\n  getCurrentValue(currentValue) {\n    this.setState({\n      currentValue: currentValue\n    });\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.fetchChangeURL(), 1000);\n    this.fetchStream();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    clearInterval(this.interval2);\n  }\n\n  getcurrenttime() {\n    this.setState({\n      currenttime: this.player.persistedCurrentTime()\n    });\n  }\n\n  render() {\n    const {\n      videodata\n    } = this.state; //console.log(videos);\n\n    return (\n      /*#__PURE__*/\n      //videoview_left_video_vid\n      _jsxDEV(\"div\", {\n        className: \"\",\n        children: [/*#__PURE__*/_jsxDEV(ReactPlayer, {\n          ref: this.ref,\n          style: {\n            position: 'relative',\n            top: 0,\n            left: 0\n          },\n          url: '../' + videodata.videofile,\n          width: \"100%\",\n          height: \"100%\",\n          playing: true,\n          className: \"tv_video\",\n          loop: true,\n          muted: this.state.isMuted,\n          config: {\n            file: {\n              attributes: {\n                autoPlay: true,\n                muted: true,\n                preload: \"auto\"\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 12\n        }, this), this.state.isMuted ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"unmute-btn2\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => this.handleMute(),\n            children: /*#__PURE__*/_jsxDEV(FaVolumeMute, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 41\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"unmute-btn2\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => this.handleUnmute(),\n            children: /*#__PURE__*/_jsxDEV(FaVolumeUp, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"live_span\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \".\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 27\n            }, this), \"Live\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)\n    );\n  }\n\n}\n\nexport default TvView;","map":{"version":3,"sources":["/Users/developertunde/iitatv/src/components/TvPlayerIndex.jsx"],"names":["React","Component","ReactPlayer","BrowserRouter","Router","Switch","Route","Link","FaVolumeDown","FaVolumeMute","FaVolumeOff","FaVolumeUp","TvView","constructor","ref","player","seekto","seekTo","state","videodata","startvideoat","fetchStream","fetch","method","headers","body","JSON","stringify","accesstoken","then","response","json","responseJSON","setState","isLoaded","streamtype","setTimeout","fetchChangeURL","videofile","handlePlayAndPause","prevState","shouldPlay","handleMute","isMuted","handleUnmute","videos","mute","currenttime","starttime","videodata2","currentValue","getCurrentValue","bind","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","interval2","getcurrenttime","persistedCurrentTime","render","position","top","left","file","attributes","autoPlay","muted","preload"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactPlayer from 'react-player/lazy'\nimport { BrowserRouter, Router, Switch, Route, Link } from \"react-router-dom\";\nimport '../assets/css/videos.css'\nimport '../assets/css/styles.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {FaVolumeDown, FaVolumeMute, FaVolumeOff, FaVolumeUp } from 'react-icons/fa'\n\nclass TvView extends Component {\n    constructor() {\n        super();\n        this.state = {\n            isLoaded: false,\n            videos: [],\n            mute: false,\n            shouldPlay: true,\n            currenttime: 0,\n            starttime: 0,\n            videodata: [],\n            videodata2: [],\n            currentValue: 0,\n            isMuted:true,\n\n        }\n        this.getCurrentValue = this.getCurrentValue.bind(this);\n    }\n\n     ref = player => {\n        this.player = player\n    }\n\n    getCurrentValue(currentValue) {\n        this.setState({\n            currentValue: currentValue\n        })\n    }\n\n    seekto = () => {\n        this.player.seekTo(this.state.videodata.startvideoat, 'seconds');\n        \n    }\n\n    fetchStream = () => {\n        //http://192.168.137.1/videostreaming/allvideos\n        fetch('/videostreaming/streaming.php', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                accesstoken: 'iita-web-developer',\n\n            })\n        })\n\n            .then((response) => response.json())\n            .then((responseJSON) => {\n                this.setState({\n                    isLoaded: true,\n                    videodata: responseJSON['output'][0]['data'][0]\n                  \n                });\n               // console.log(responseJSON);\n             \n\n               if(responseJSON['output'][0]['data'][0].streamtype == 'live'){\n                setTimeout(() => {\n                    this.seekto();\n                    \n                   }, 2000);\n               }    \n               \n           \n            })\n    }\n\n\n\n    fetchChangeURL = () => {\n        //http://192.168.137.1/videostreaming/allvideos\n        fetch('/videostreaming/streaming.php', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                accesstoken: 'iita-web-developer',\n\n            })\n        })\n\n            .then((response) => response.json())\n            .then((responseJSON) => {\n                if (responseJSON['output'][0]['data'][0].videofile === this.state.videodata.videofile) {\n\n                } else {\n                    this.setState({\n                        isLoaded: true,\n\n                        videodata: responseJSON['output'][0]['data'][0]\n                    });\n                  \n                    if(responseJSON['output'][0]['data'][0].streamtype == 'live'){\n                        this.seekto();\n                    }\n                     //console.log(responseJSON);\n                }\n                 //console.log(responseJSON);\n\n            })\n    }\n\n   \n\n  \n\n    componentDidMount() {\n\n        this.interval = setInterval(() => this.fetchChangeURL(), 1000);\n        this.fetchStream();\n    \n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n        clearInterval(this.interval2);\n    }\n\n\n    getcurrenttime() {\n        this.setState({\n            currenttime: this.player.persistedCurrentTime(),\n        })\n    }\n\n    handlePlayAndPause = () => {\n        this.setState(prevState => ({\n            shouldPlay: !prevState.shouldPlay\n        }));\n    }\n\n\n  \n    render() {\n        const { videodata} = this.state;\n        //console.log(videos);\n        return (\n            //videoview_left_video_vid\n          <div className=\"\">\n           <ReactPlayer\n               ref={this.ref}\n              style={{ position: 'relative', top: 0, left: 0, }}\n              url={'../'+videodata.videofile}\n              width='100%'\n              height='100%'\n              playing={true}\n              className=\"tv_video\"\n              loop={true}\n              muted={this.state.isMuted}\n              config={{ file: { attributes: {\n               autoPlay: true,\n               muted: true,\n               preload: \"auto\"\n              }}}}\n              />\n              {\n                  (this.state.isMuted)? <div className=\"unmute-btn2\">\n                  <span onClick={() => this.handleMute()}>\n                      <FaVolumeMute />\n                  </span>\n              </div>:\n              <div className=\"unmute-btn2\">\n              <span onClick={() => this.handleUnmute()}>\n                  <FaVolumeUp />\n              </span>\n          </div>\n              }\n              <div className=\"live_span\">\n                    <span><b>.</b>Live</span>\n              </div>\n            </div>\n          \n        );\n    }\n\n\n    handleMute = () =>{\n        this.setState({\n            isMuted:false\n        })\n    }\n\n\n    handleUnmute = () =>{\n        this.setState({\n            isMuted:true\n        })\n    }\n\n}\n\nexport default TvView;\n"]},"metadata":{},"sourceType":"module"}